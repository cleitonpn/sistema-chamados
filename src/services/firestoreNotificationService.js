import { 
  collection, 
  doc, 
  setDoc, 
  getDoc, 
  getDocs,
  updateDoc, 
  onSnapshot, 
  query, 
  where, 
  orderBy,
  serverTimestamp,
  addDoc,
  deleteDoc
} from 'firebase/firestore';
import { db } from '../config/firebase';

class FirestoreNotificationService {
  constructor() {
    this.listeners = new Map();
  }

  /**
   * Criar uma nova notifica√ß√£o
   */
  async createNotification(notification) {
    try {
      const notificationRef = await addDoc(collection(db, 'notifications'), {
        ...notification,
        criadoEm: serverTimestamp(),
        lida: false
      });

      console.log('‚úÖ Notifica√ß√£o criada:', notificationRef.id);
      return notificationRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Buscar notifica√ß√µes de um usu√°rio
   */
  async getUserNotifications(userId, limit = 50) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('destinatarioId', '==', userId),
        orderBy('criadoEm', 'desc')
      );

      const snapshot = await getDocs(q);
      const notifications = [];

      snapshot.forEach((doc) => {
        notifications.push({
          id: doc.id,
          ...doc.data()
        });
      });

      console.log(`üì± ${notifications.length} notifica√ß√µes carregadas para usu√°rio ${userId}`);
      return notifications;
    } catch (error) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes:', error);
      return [];
    }
  }

  /**
   * Marcar notifica√ß√£o como lida
   */
  async markAsRead(userId, notificationId) {
    try {
      const notificationRef = doc(db, 'notifications', notificationId);
      await updateDoc(notificationRef, {
        lida: true,
        lidaEm: serverTimestamp()
      });

      console.log('‚úÖ Notifica√ß√£o marcada como lida:', notificationId);
    } catch (error) {
      console.error('‚ùå Erro ao marcar notifica√ß√£o como lida:', error);
      throw error;
    }
  }

  /**
   * Marcar notifica√ß√£o como n√£o lida
   */
  async markAsUnread(userId, notificationId) {
    try {
      const notificationRef = doc(db, 'notifications', notificationId);
      await updateDoc(notificationRef, {
        lida: false,
        lidaEm: null
      });

      console.log('‚úÖ Notifica√ß√£o marcada como n√£o lida:', notificationId);
    } catch (error) {
      console.error('‚ùå Erro ao marcar notifica√ß√£o como n√£o lida:', error);
      throw error;
    }
  }

  /**
   * Marcar todas as notifica√ß√µes como lidas
   */
  async markAllAsRead(userId) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('destinatarioId', '==', userId),
        where('lida', '==', false)
      );

      const snapshot = await getDocs(q);
      const promises = [];

      snapshot.forEach((doc) => {
        promises.push(
          updateDoc(doc.ref, {
            lida: true,
            lidaEm: serverTimestamp()
          })
        );
      });

      await Promise.all(promises);
      console.log(`‚úÖ ${promises.length} notifica√ß√µes marcadas como lidas`);
    } catch (error) {
      console.error('‚ùå Erro ao marcar todas as notifica√ß√µes como lidas:', error);
      throw error;
    }
  }

  /**
   * Deletar uma notifica√ß√£o
   */
  async deleteNotification(userId, notificationId) {
    try {
      const notificationRef = doc(db, 'notifications', notificationId);
      await deleteDoc(notificationRef);

      console.log('‚úÖ Notifica√ß√£o deletada:', notificationId);
    } catch (error) {
      console.error('‚ùå Erro ao deletar notifica√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Escutar notifica√ß√µes em tempo real
   */
  subscribeToNotifications(userId, callback) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('destinatarioId', '==', userId),
        orderBy('criadoEm', 'desc')
      );

      const unsubscribe = onSnapshot(q, (snapshot) => {
        const notifications = [];
        
        snapshot.forEach((doc) => {
          notifications.push({
            id: doc.id,
            ...doc.data()
          });
        });

        callback(notifications);
      });

      // Armazenar listener para cleanup
      this.listeners.set(userId, unsubscribe);

      console.log('üëÇ Listener de notifica√ß√µes ativado para usu√°rio:', userId);
      return unsubscribe;
    } catch (error) {
      console.error('‚ùå Erro ao configurar listener de notifica√ß√µes:', error);
      return () => {}; // Retorna fun√ß√£o vazia em caso de erro
    }
  }

  /**
   * Parar de escutar notifica√ß√µes
   */
  unsubscribeFromNotifications(userId) {
    const unsubscribe = this.listeners.get(userId);
    if (unsubscribe) {
      unsubscribe();
      this.listeners.delete(userId);
      console.log('üîá Listener de notifica√ß√µes desativado para usu√°rio:', userId);
    }
  }

  /**
   * Enviar notifica√ß√£o para m√∫ltiplos usu√°rios
   */
  async sendNotificationToUsers(userIds, notificationData) {
    try {
      const promises = userIds.map(userId => 
        this.createNotification({
          ...notificationData,
          destinatarioId: userId
        })
      );

      await Promise.all(promises);
      console.log(`‚úÖ Notifica√ß√£o enviada para ${userIds.length} usu√°rios`);
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o para usu√°rios:', error);
      throw error;
    }
  }

  /**
   * Buscar usu√°rios por fun√ß√£o/√°rea
   */
  async getUsersByRole(role) {
    try {
      const q = query(
        collection(db, 'users'),
        where('funcao', '==', role)
      );

      const snapshot = await getDocs(q);
      const users = [];

      snapshot.forEach((doc) => {
        users.push({
          id: doc.id,
          ...doc.data()
        });
      });

      return users;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios por fun√ß√£o:', error);
      return [];
    }
  }

  /**
   * Buscar usu√°rios por √°rea espec√≠fica
   */
  async getUsersByArea(area) {
    try {
      const q = query(
        collection(db, 'users'),
        where('area', '==', area)
      );

      const snapshot = await getDocs(q);
      const users = [];

      snapshot.forEach((doc) => {
        users.push({
          id: doc.id,
          ...doc.data()
        });
      });

      return users;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios por √°rea:', error);
      return [];
    }
  }
}

// Criar inst√¢ncia √∫nica do servi√ßo
export const firestoreNotificationService = new FirestoreNotificationService();
export default firestoreNotificationService;

